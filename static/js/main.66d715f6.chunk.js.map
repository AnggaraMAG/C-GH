{"version":3,"sources":["components/home/Header.js","components/home/Foto.js","components/home/Body.js","components/home/Landing.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","expand","style","color","Toggle","aria-controls","Foto","user","this","props","console","log","heigth","width","src","owner","avatar_url","marginTop","login","Component","Body","state","name","data","handleChange","e","preventDefault","setState","target","value","handleSearch","axios","get","then","res","Row","Col","margin","sm","Form","inline","FormControl","type","placeholder","className","onChange","Button","variant","onClick","map","index","key","borderBottom","href","html_url","language","Landing","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qPAYeA,MAVf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,MACrB,wBAAIC,MAAO,CAAEC,MAAO,UAApB,cACF,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,wB,yFCLhBC,E,uKAEjB,IAAMC,EAAOC,KAAKC,MAAMF,KAAK,GAE7B,OADAG,QAAQC,IAAI,eAAgBJ,GAE1B,6BACE,yBACEL,MAAO,CAAEU,OAAQ,IAAKC,MAAO,KAC7BC,IAAKP,GAAQA,EAAKQ,MAAMC,aAE1B,wBAAId,MAAO,CAAEe,UAAW,IAAMV,GAAQA,EAAKQ,MAAMG,Y,GAVvBC,aCGbC,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,KAAM,I,EAGRC,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,SAAS,CACZL,KAAMG,EAAEG,OAAOC,QAEjBnB,QAAQC,IAAI,eAAgBc,EAAEG,OAAOC,Q,EAGvCC,aAAe,SAACL,GACdA,EAAEC,iBACFK,IACGC,IADH,uCACuC,EAAKX,MAAMC,KADlD,WAEGW,MAAK,SAACC,GACL,IAAMX,EAAOW,EAAIX,KACjB,EAAKI,SAAS,CAAEJ,a,uDAIZ,IACAA,EAASf,KAAKa,MAAdE,KAER,OADAb,QAAQC,IAAI,YAAaY,GAEvB,yBAAKrB,MAAO,CAAEe,UAAW,KACvB,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKlC,MAAO,CAAEmC,OAAQ,eACpB,kBAAC,EAAD,CAAM9B,KAAMgB,KAEd,kBAACa,EAAA,EAAD,CAAKE,GAAI,GACP,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CACEZ,MAAOrB,KAAKa,MAAMC,KAClBoB,KAAK,OACLpB,KAAK,OACLqB,YAAY,oBACZC,UAAU,UACVC,SAAUrC,KAAKgB,eAEjB,kBAACsB,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAASxC,KAAKsB,cAA7C,WAIF,6BACA,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,+CACCb,EAAK0B,KAAI,SAACC,EAAOC,GAAR,OACR,yBACEP,UAAU,OACVO,IAAKA,EACLjD,MAAO,CAAEkD,aAAc,cAEvB,uBAAGC,KAAMH,EAAMI,UACb,4BAAKJ,EAAM5B,OAEX,2BAAI4B,EAAMK,uB,GA5DEpC,aCQnBqC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCISC,MAPf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.66d715f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" expand=\"lg\">\r\n          <h5 style={{ color: \"white\" }}>TDS Telkom</h5>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Foto extends Component {\r\n  render() {\r\n    const user = this.props.user[0];\r\n    console.log(\"passing data\", user);\r\n    return (\r\n      <div>\r\n        <img\r\n          style={{ heigth: 300, width: 300 }}\r\n          src={user && user.owner.avatar_url}\r\n        ></img>\r\n        <h5 style={{ marginTop: 5 }}>{user && user.owner.login}</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Row, Col, Form, FormControl, Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Foto from \"./Foto\";\r\n\r\nexport default class Body extends Component {\r\n  state = {\r\n    name: \"\",\r\n    data: [],\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      name: e.target.value,\r\n    });\r\n    console.log(\"dkaowdkoakda\", e.target.value);\r\n  };\r\n\r\n  handleSearch = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .get(`https://api.github.com/users/${this.state.name}/repos`)\r\n      .then((res) => {\r\n        const data = res.data;\r\n        this.setState({ data });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n    console.log(\"dataaaaaa\", data);\r\n    return (\r\n      <div style={{ marginTop: 10 }}>\r\n        <Row>\r\n          <Col style={{ margin: \"0 0 0 10px\" }}>\r\n            <Foto user={data} />\r\n          </Col>\r\n          <Col sm={9}>\r\n            <Form inline>\r\n              <FormControl\r\n                value={this.state.name}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Search Account...\"\r\n                className=\"mr-sm-2\"\r\n                onChange={this.handleChange}\r\n              />\r\n              <Button variant=\"outline-dark\" onClick={this.handleSearch}>\r\n                Search\r\n              </Button>\r\n            </Form>\r\n            <hr />\r\n            <Row>\r\n              <Col>\r\n                <h2>List Repository</h2>\r\n                {data.map((index, key) => (\r\n                  <div\r\n                    className=\"mt-3\"\r\n                    key={key}\r\n                    style={{ borderBottom: \"1px solid\" }}\r\n                  >\r\n                    <a href={index.html_url}>\r\n                      <h5>{index.name}</h5>\r\n                    </a>\r\n                      <p>{index.language}</p>\r\n                  </div>\r\n                ))}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Body from \"./Body\";\r\n\r\nfunction Landing() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Body/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Landing from \"./components/home/Landing\";\nimport Body from './components/home/Body'\n\nfunction App() {\n  return (\n    <div>\n      <Landing />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}